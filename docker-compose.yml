version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: ecommerce_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root123
      MYSQL_DATABASE: ecommerce_db
      MYSQL_USER: dev_user
      MYSQL_PASSWORD: dev_pass
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ecommerce_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Laravel Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: ecommerce_backend
    restart: unless-stopped
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - APP_KEY=base64:your-app-key-here
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=ecommerce_db
      - DB_USERNAME=dev_user
      - DB_PASSWORD=dev_pass
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/var/www/html
      - backend_storage:/var/www/html/storage
      - backend_vendor:/var/www/html/vendor
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecommerce_network
    command: >
      sh -c "
        composer install --no-interaction &&
        php artisan key:generate &&
        php artisan migrate --force &&
        php artisan db:seed &&
        php artisan serve --host=0.0.0.0 --port=8000
      "

  # Vue.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: ecommerce_frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8000/api
      - VITE_APP_NAME=SoleMate
      - VITE_APP_ENV=local
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend
    networks:
      - ecommerce_network
    command: >
      sh -c "
        npm install &&
        npm run dev -- --host 0.0.0.0
      "

  # Nginx
  nginx:
    image: nginx:alpine
    container_name: ecommerce_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.dev.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/sites:/etc/nginx/sites-available
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - ecommerce_network

  # PHPMyAdmin
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: ecommerce_phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: dev_user
      PMA_PASSWORD: dev_pass
      PMA_ARBITRARY: 1
    ports:
      - "8080:80"
    depends_on:
      - mysql
    networks:
      - ecommerce_network

  # Redis Commander
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ecommerce_redis_commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - ecommerce_network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  backend_storage:
    driver: local
  backend_vendor:
    driver: local
  frontend_node_modules:
    driver: local

networks:
  ecommerce_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: ecommerce_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, dom, fileinfo, mysql, redis, zip, gd, curl, xml, bcmath, soap, intl, readline, sqlite3, pdo_sqlite, pdo_mysql
        coverage: xdebug

    - name: Verify Backend Files
      run: |
        echo "Checking backend files..."
        ls -la backend/composer.json
        ls -la backend/Dockerfile
        ls -la backend/artisan
        echo "Backend files exist!"

    - name: Create .env file
      run: |
        # Create .env file from scratch
        cat > .env << EOF
APP_NAME=SoleMate
APP_ENV=testing
APP_KEY=
APP_DEBUG=true
APP_URL=http://localhost

LOG_CHANNEL=stack
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=ecommerce_db
DB_USERNAME=root
DB_PASSWORD=password

BROADCAST_DRIVER=log
CACHE_DRIVER=file
FILESYSTEM_DISK=local
QUEUE_CONNECTION=sync
SESSION_DRIVER=file
SESSION_LIFETIME=120

MEMCACHED_HOST=127.0.0.1

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=smtp
MAIL_HOST=mailpit
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="${APP_NAME}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
PUSHER_HOST=
PUSHER_PORT=443
PUSHER_SCHEME=https
PUSHER_APP_CLUSTER=mt1

VITE_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
VITE_PUSHER_HOST="${PUSHER_HOST}"
VITE_PUSHER_PORT="${PUSHER_PORT}"
VITE_PUSHER_SCHEME="${PUSHER_SCHEME}"
VITE_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"
EOF
      working-directory: ./backend

    - name: Create required directories
      run: |
        mkdir -p bootstrap/cache
        mkdir -p storage/app
        mkdir -p storage/framework/cache
        mkdir -p storage/framework/sessions
        mkdir -p storage/framework/views
        mkdir -p storage/logs
        chmod -R 755 bootstrap/cache storage
      working-directory: ./backend

    - name: Install Composer Dependencies
      run: |
        echo "Installing Composer dependencies..."
        composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
        echo "Composer dependencies installed successfully!"
        composer show --installed | head -10
      working-directory: ./backend

    - name: Verify .env file exists
      run: |
        if [ ! -f .env ]; then
          echo "Error: .env file not found!"
          exit 1
        fi
        echo ".env file exists and is ready"
      working-directory: ./backend

    - name: Generate key
      run: |
        echo "Generating application key..."
        php artisan key:generate
        echo "Application key generated successfully!"
        php artisan --version
      working-directory: ./backend
      env:
        APP_ENV: testing

    - name: Wait for MySQL
      run: |
        for i in {1..30}; do
          if mysql --host 127.0.0.1 --port 3306 -uroot -ppassword -e "SELECT 1" >/dev/null 2>&1; then
            echo "MySQL is ready!"
            break
          fi
          echo "Waiting for MySQL... ($i/30)"
          sleep 2
        done

    - name: Create Database
      run: |
        mysql --host 127.0.0.1 --port 3306 -uroot -ppassword -e "CREATE DATABASE IF NOT EXISTS ecommerce_db;"
        mysql --host 127.0.0.1 --port 3306 -uroot -ppassword -e "SHOW DATABASES;"
      working-directory: ./backend

    - name: Run Migrations
      run: |
        echo "Running database migrations..."
        php artisan migrate --force
        echo "Migrations completed successfully!"
        php artisan migrate:status
      working-directory: ./backend
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: ecommerce_db
        DB_USERNAME: root
        DB_PASSWORD: password
        APP_ENV: testing

    - name: Execute tests (Unit and Feature tests) via PHPUnit
      run: |
        echo "Running PHPUnit tests..."
        php artisan test
        echo "Tests completed successfully!"
      working-directory: ./backend
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: ecommerce_db
        DB_USERNAME: root
        DB_PASSWORD: password
        REDIS_HOST: 127.0.0.1
        REDIS_PORT: 6379
        APP_ENV: testing

  frontend-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Verify Frontend Files
      run: |
        echo "Checking frontend files..."
        ls -la frontend/package.json
        ls -la frontend/Dockerfile
        echo "Frontend files exist!"

    - name: Install dependencies
      run: |
        npm ci --prefer-offline --no-audit
        npm list --depth=0
      working-directory: ./frontend

    - name: Run tests
      run: |
        echo "Running frontend tests..."
        npm run test:unit
        echo "Frontend tests completed successfully!"
      working-directory: ./frontend

    - name: Build
      run: |
        echo "Building frontend application..."
        npm run build
        echo "Build completed successfully!"
        ls -la dist/
      working-directory: ./frontend

  docker-build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Verify Required Files
      run: |
        echo "Checking required files..."
        ls -la backend/Dockerfile
        ls -la frontend/Dockerfile
        ls -la docker-compose.yml
        ls -la docker-compose.prod.yml
        echo "All required files exist!"

    - name: Create missing Docker files
      run: |
        # Create missing supervisor config
        mkdir -p docker/supervisor
        cat > docker/supervisor/supervisord.conf << 'EOF'
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:php-fpm]
command=php-fpm -F
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
autorestart=false
startretries=0

[program:laravel-worker]
process_name=%(program_name)s_%(process_num)02d
command=php /var/www/html/artisan queue:work --sleep=3 --tries=3 --max-time=3600
autostart=true
autorestart=true
stopasgroup=true
killasgroup=true
user=www-data
numprocs=2
redirect_stderr=true
stdout_logfile=/var/log/supervisor/worker.log
stopwaitsecs=3600
EOF
        
        # Create missing PHP config
        mkdir -p docker/php
        cat > docker/php/php.prod.ini << 'EOF'
[PHP]
memory_limit = 512M
max_execution_time = 300
opcache.enable = 1
opcache.memory_consumption = 256
opcache.max_accelerated_files = 20000
opcache.validate_timestamps = 0
EOF

    - name: Create composer.lock if missing
      run: |
        echo "Checking composer.lock..."
        if [ ! -f backend/composer.lock ]; then
          echo "composer.lock not found, generating..."
          cd backend
          composer install --no-dev --no-interaction --no-scripts
          cd ..
          echo "composer.lock generated successfully!"
        else
          echo "composer.lock already exists!"
        fi
        ls -la backend/composer.lock

    - name: Build Backend Docker Image
      run: |
        echo "Building backend Docker image..."
        docker build -f backend/Dockerfile -t solemate-backend ./backend
        echo "Backend image built successfully!"
        docker images | grep solemate-backend
        docker inspect solemate-backend --format='{{.Size}}'

    - name: Build Frontend Docker Image
      run: |
        echo "Building frontend Docker image..."
        docker build -f frontend/Dockerfile -t solemate-frontend ./frontend
        echo "Frontend image built successfully!"
        docker images | grep solemate-frontend
        docker inspect solemate-frontend --format='{{.Size}}'

    - name: Test Docker Compose
      run: |
        echo "Testing Docker Compose configurations..."
        docker-compose -f docker-compose.yml config
        echo "Development compose config is valid!"
        docker-compose -f docker-compose.prod.yml config
        echo "Production compose config is valid!"
        echo "All Docker configurations are valid!"
        echo "CI/CD Pipeline completed successfully!"